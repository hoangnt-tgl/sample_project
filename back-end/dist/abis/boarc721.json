{
    "address": "0xe631Ec22a875b2e052E24b096353C4531D42d510",
    "abi": [
        { "inputs": [{ "internalType": "string", "name": "_uri", "type": "string" }, { "internalType": "uint256", "name": "_feeMint", "type": "uint256" }, { "internalType": "address", "name": "_feeRecipient", "type": "address" }], "stateMutability": "nonpayable", "type": "constructor" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "approved", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Approval", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "operator", "type": "address" }, { "indexed": false, "internalType": "bool", "name": "approved", "type": "bool" }], "name": "ApprovalForAll", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "string", "name": "newBaseURI", "type": "string" }], "name": "BaseURIChanged", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "timestamp", "type": "uint256" }], "name": "DropPaused", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "uint256", "name": "timestamp", "type": "uint256" }], "name": "DropUnpaused", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "owner", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "indexed": false, "internalType": "uint256", "name": "timestamp", "type": "uint256" }], "name": "Minted", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "previousOwner", "type": "address" }, { "indexed": true, "internalType": "address", "name": "newOwner", "type": "address" }], "name": "OwnershipTransferred", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "account", "type": "address" }], "name": "Paused", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": true, "internalType": "address", "name": "from", "type": "address" }, { "indexed": true, "internalType": "address", "name": "to", "type": "address" }, { "indexed": true, "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "Transfer", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "account", "type": "address" }], "name": "Unpaused", "type": "event" }, { "anonymous": false, "inputs": [{ "indexed": false, "internalType": "address", "name": "token", "type": "address" }, { "indexed": false, "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "WithdrawToken", "type": "event" }, { "inputs": [], "name": "MAX_SUPPLY", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "ROYALTY_FEE", "outputs": [{ "internalType": "uint96", "name": "", "type": "uint96" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "approve", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }], "name": "balanceOf", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "baseURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "claim", "outputs": [], "stateMutability": "payable", "type": "function" }, { "inputs": [], "name": "feeMint", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "feeRecipient", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "getApproved", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "owner", "type": "address" }, { "internalType": "address", "name": "operator", "type": "address" }], "name": "isApprovedForAll", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "name", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "owner", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "ownerOf", "outputs": [{ "internalType": "address", "name": "", "type": "address" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "pause", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "paused", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "renounceOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint256", "name": "_tokenId", "type": "uint256" }, { "internalType": "uint256", "name": "_salePrice", "type": "uint256" }], "name": "royaltyInfo", "outputs": [{ "internalType": "address", "name": "", "type": "address" }, { "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }, { "internalType": "bytes", "name": "_data", "type": "bytes" }], "name": "safeTransferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "operator", "type": "address" }, { "internalType": "bool", "name": "approved", "type": "bool" }], "name": "setApprovalForAll", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "string", "name": "uri", "type": "string" }], "name": "setBaseURI", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "uint256", "name": "fee", "type": "uint256" }], "name": "setFeeMint", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "bytes4", "name": "interfaceId", "type": "bytes4" }], "name": "supportsInterface", "outputs": [{ "internalType": "bool", "name": "", "type": "bool" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "symbol", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "tokenURI", "outputs": [{ "internalType": "string", "name": "", "type": "string" }], "stateMutability": "view", "type": "function" }, { "inputs": [], "name": "totalSupply", "outputs": [{ "internalType": "uint256", "name": "", "type": "uint256" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "from", "type": "address" }, { "internalType": "address", "name": "to", "type": "address" }, { "internalType": "uint256", "name": "tokenId", "type": "uint256" }], "name": "transferFrom", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "newOwner", "type": "address" }], "name": "transferOwnership", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "unpause", "outputs": [], "stateMutability": "nonpayable", "type": "function" }, { "inputs": [], "name": "whiteList", "outputs": [{ "internalType": "address[]", "name": "_whitelist", "type": "address[]" }], "stateMutability": "view", "type": "function" }, { "inputs": [{ "internalType": "address", "name": "token", "type": "address" }, { "internalType": "uint256", "name": "amount", "type": "uint256" }], "name": "withdrawToken", "outputs": [], "stateMutability": "nonpayable", "type": "function" }
    ],
    "transactionHash": "0x6ab0b9fc27db5e997a2097bda6d56c4bab13348875e26b4d37bbacc9470b403c",
    "receipt": {
        "to": null,
        "from": "0x00B91B2F8aFE87FCDc2b3fFA9ee2278cd1E4DDf8",
        "contractAddress": "0xCb750269691c66cB2156D5B374d55bE1f876b8A4",
        "transactionIndex": 8,
        "gasUsed": "2442897",
        "logsBloom": "0x
        "blockHash": "0x0350221baf8ad72b8d4536438ba44fc8f3da31bc0cd85263e028d0270f843563",
        "transactionHash": "0x6ab0b9fc27db5e997a2097bda6d56c4bab13348875e26b4d37bbacc9470b403c",
        "logs": [
            {
                "transactionIndex": 8,
                "blockNumber": 11452262,
                "transactionHash": "0x6ab0b9fc27db5e997a2097bda6d56c4bab13348875e26b4d37bbacc9470b403c",
                "address": "0xCb750269691c66cB2156D5B374d55bE1f876b8A4",
                "topics": [
                    "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0x00000000000000000000000000b91b2f8afe87fcdc2b3ffa9ee2278cd1e4ddf8"
                ],
                "data": "0x",
                "logIndex": 37,
                "blockHash": "0x0350221baf8ad72b8d4536438ba44fc8f3da31bc0cd85263e028d0270f843563"
            }
        ],
        "blockNumber": 11452262,
        "cumulativeGasUsed": "9272552",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "https://res.cloudinary.com/dyh2c5n8i/raw/upload/v1657268299/NCA_Info/",
        "10000000000000000",
        "0x00B91B2F8aFE87FCDc2b3fFA9ee2278cd1E4DDf8"
    ],
    "solcInputHash": "6b80ad79127eaebbf54b40097d06262d",
    "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_feeMint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newBaseURI\",\"type\":\"string\"}],\"name\":\"BaseURIChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DropPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DropUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltiesPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"setFeeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"whiteList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_whitelist\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"paused()\":{\"details\":\"Return true if the contract is paused, and false otherwise\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/drops/Boarc.sol\":\"BoarcDrop\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x5c8ae508c9208b232eada2cf40a774371336fad5b9f3a921fdfdaa007bf23c5e\",\"license\":\"MIT\"},\"contracts/drops/Boarc.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/ERC721.sol\\\";\\nimport \\\"../utils/Pausable.sol\\\";\\nimport \\\"../access/Ownable.sol\\\";\\nimport \\\"../utils/Counters.sol\\\";\\nimport \\\"../utils/libraries/EnumerableSet.sol\\\";\\nimport \\\"../utils/SafeTransfer.sol\\\";\\n\\ncontract BoarcDrop is ERC721, SafeTransfer, Pausable, Ownable {\\n\\tusing EnumerableSet for EnumerableSet.AddressSet;\\n\\tusing Counters for Counters.Counter;\\n\\n\\tEnumerableSet.AddressSet whitelist;\\n\\tCounters.Counter private tokenIdCounter;\\n\\tuint256 public constant maxSupply = 99;\\n\\n\\tuint256 public royaltiesPercent = 1000;\\n\\tuint256 public feeMint;\\n\\taddress public feeRecipient;\\n\\tstring public baseURI;\\n\\n\\tmapping(uint256 => address) public creator;\\n\\n\\tevent Minted(address owner, uint256 tokenId, uint256 time);\\n\\tevent DropPaused(uint256 timestamp);\\n\\tevent DropUnpaused(uint256 timestamp);\\n\\tevent BaseURIChanged(string newBaseURI);\\n\\tevent WithdrawToken(address token, uint256 amount);\\n\\n\\tconstructor(\\n\\t\\tstring memory _uri,\\n\\t\\tuint256 _feeMint,\\n\\t\\taddress _feeRecipient\\n\\t) ERC721(\\\"Art Of Bamboo\\\", \\\"BOARC\\\") {\\n\\t\\trequire(_feeRecipient != address(0), \\\"BD: zero address\\\");\\n\\t\\tbaseURI = _uri;\\n\\t\\tfeeMint = _feeMint;\\n\\t\\tfeeRecipient = _feeRecipient;\\n\\t}\\n\\n\\tfunction tokenURI(uint256 tokenId) public view override returns (string memory) {\\n\\t\\treturn string(abi.encodePacked(super.tokenURI(tokenId), \\\".json\\\"));\\n\\t}\\n\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn tokenIdCounter.current();\\n\\t}\\n\\n\\tfunction whiteList() public view returns (address[] memory _whitelist) {\\n\\t\\tuint256 lenght = whitelist.length();\\n\\t\\t_whitelist = new address[](lenght);\\n\\t\\tfor (uint256 i = 0; i < lenght; i++) {\\n\\t\\t\\t_whitelist[i] = whitelist.at(i);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction pause() public onlyOwner {\\n\\t\\t_pause();\\n\\t\\temit DropPaused(block.timestamp);\\n\\t}\\n\\n\\tfunction unpause() public onlyOwner {\\n\\t\\t_unpause();\\n\\t\\temit DropUnpaused(block.timestamp);\\n\\t}\\n\\n\\tfunction withdrawToken(address token, uint256 amount) public onlyOwner {\\n\\t\\tsafeTokenTransfer(token, payable(_msgSender()), amount);\\n\\t\\temit WithdrawToken(token, amount);\\n\\t}\\n\\n\\tfunction setBaseURI(string memory uri) public onlyOwner {\\n\\t\\trequire(bytes(uri).length > 0, \\\"BD: invalid uri\\\");\\n\\t\\tbaseURI = uri;\\n\\t\\temit BaseURIChanged(uri);\\n\\t}\\n\\n\\tfunction setFeeMint(uint256 fee) public onlyOwner {\\n\\t\\tfeeMint = fee;\\n\\t}\\n\\n\\tfunction safeMint() public payable whenNotPaused {\\n\\t\\trequire(msg.value >= feeMint, \\\"BD: Insufficient fee\\\");\\n\\t\\trequire(tokenIdCounter.current() < maxSupply, \\\"BD: Sold out\\\");\\n\\n\\t\\tpayable(feeRecipient).transfer(feeMint);\\n\\t\\tuint256 diff = msg.value - feeMint;\\n\\t\\tif (diff > 0) payable(_msgSender()).transfer(diff);\\n\\n\\t\\ttokenIdCounter.increment();\\n\\t\\tuint256 tokenId = tokenIdCounter.current();\\n\\t\\t_safeMint(_msgSender(), tokenId);\\n\\n\\t\\tif (!whitelist.contains(_msgSender())) {\\n\\t\\t\\twhitelist.add(_msgSender());\\n\\t\\t}\\n\\t\\tcreator[tokenId] = _msgSender();\\n\\n\\t\\temit Minted(_msgSender(), tokenId, block.timestamp);\\n\\t}\\n\\n\\tfunction _baseURI() internal view override returns (string memory) {\\n\\t\\treturn baseURI;\\n\\t}\\n}\\n\",\"keccak256\":\"0xebb30f6c542a7380510ac89fb7d78830ed61d75552261339bafdf73880a0dc6d\",\"license\":\"MIT\"},\"contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"../../utils/libraries/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/libraries/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\",\"keccak256\":\"0x1546eb5d12eb8e1cc6dfe804f1caa81d44a5ee49249c506605e9960862ab4a36\",\"license\":\"MIT\"},\"contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\",\"keccak256\":\"0x1203adfd0a1f83aeef15dbe4bef071c3a102985caff77e05f47629d7adc87d7e\",\"license\":\"MIT\"},\"contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\",\"keccak256\":\"0x23e882d3b074890de42e57af24d0a860eb341e04778a8f15f1a2ed90007b3499\",\"license\":\"MIT\"},\"contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\",\"keccak256\":\"0xdaee45f548b9d7421792b81e370461d523ca1442e872e02cb045ce9d443fd813\",\"license\":\"MIT\"},\"contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @dev Provides counters that can only be incremented, decremented or reset.\\n */\\n\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value;\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        uint256 currentValue = current(counter);\\n        unchecked {\\n            counter._value += 1;\\n        }\\n        require(counter._value > currentValue, \\\"Counter: increment overflow\\\");\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement underflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x57bd07896134543ba81351b01c9ff9863d0a63c26f6849afb07a2243ece3fccf\",\"license\":\"MIT\"},\"contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Pausable is Context {\\n  bool private _paused;\\n\\n  event Paused(address account);\\n  event Unpaused(address account);\\n\\n  modifier whenNotPaused() {\\n    require(!paused(), \\\"Pausable: paused\\\");\\n    _;\\n  }\\n\\n  modifier whenPaused() {\\n    require(paused(), \\\"Pausable: not paused\\\");\\n    _;\\n  }\\n\\n  constructor() {\\n    _paused = false;\\n  }\\n\\n  /**\\n   * @dev Return true if the contract is paused, and false otherwise\\n   */\\n  function paused() public virtual view returns (bool) {\\n    return _paused;\\n  }\\n\\n  function _pause() internal virtual whenNotPaused {\\n    _paused = true;\\n    emit Paused(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Return to normal state\\n   */\\n  function _unpause() internal virtual whenPaused {\\n    _paused = false;\\n    emit Unpaused(_msgSender());\\n  }\\n}\",\"keccak256\":\"0xc98d577d296a840c7df80eb8ade2a381db98ec2c8e6bce0f38bf878d2e18bb2d\",\"license\":\"MIT\"},\"contracts/utils/SafeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ncontract SafeTransfer {\\n  address private constant ETH_ADDRESS = 0x0000000000000000000000000000000000000000;\\n\\n  function safeTokenTransfer(address _token, address payable _to, uint256 _amount) internal {\\n    if (address(_token) == ETH_ADDRESS) {\\n      _safeTransferETH(_to, _amount);\\n    } else {\\n      _safeTransfer(_token, _to, _amount);\\n    }\\n  }\\n\\n  function tokenTransfer(address _token, address payable _to, uint256 _amount) internal {\\n    if (address(_token) == ETH_ADDRESS) {\\n      _to.transfer(_amount);\\n    } else {\\n      _safeTransfer(_token, _to, _amount);\\n    }\\n  }\\n\\n  function safeApprove(address token, address to, uint256 amount) internal {\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, amount));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ST: approve failed\\\");\\n  }\\n\\n  function _safeTransfer(address token, address to, uint256 amount) internal {\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, amount));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ST: transfer failed\\\");\\n  }\\n\\n  function _safeTransferFrom(address token, address from, uint256 amount) internal {\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, address(this), amount));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ST: transfer from failed\\\");\\n  }\\n\\n  function _safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n    (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, amount));\\n    require(success && (data.length == 0 || abi.decode(data, (bool))), \\\"ST: transfer from failed\\\");\\n  }\\n\\n  function _safeTransferETH(address to, uint256 value) internal {\\n    (bool success,) = to.call{value: value}(\\\"\\\");\\n    require(success, \\\"ST: eth transfer failed\\\"); \\n  }\\n}\",\"keccak256\":\"0x94ba0b988370c98b96a3f88d8f6b8e9ca99a2acc4be3fee088771150ed1ae60c\",\"license\":\"MIT\"},\"contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x93b1ce940e4e905752730be86b74d5f915097747868f7876e1de9af86afa6ad4\",\"license\":\"MIT\"},\"contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"contracts/utils/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(\\n            address(this).balance >= amount,\\n            \\\"Address: insufficient balance\\\"\\n        );\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(\\n            success,\\n            \\\"Address: unable to send value, recipient may have reverted\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                \\\"Address: low-level call with value failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(\\n            address(this).balance >= value,\\n            \\\"Address: insufficient balance for call\\\"\\n        );\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(\\n            data\\n        );\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data)\\n        internal\\n        view\\n        returns (bytes memory)\\n    {\\n        return\\n            functionStaticCall(\\n                target,\\n                data,\\n                \\\"Address: low-level static call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data)\\n        internal\\n        returns (bytes memory)\\n    {\\n        return\\n            functionDelegateCall(\\n                target,\\n                data,\\n                \\\"Address: low-level delegate call failed\\\"\\n            );\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) private pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc7a79a3811a2d5ccd504dfc51074048aa28b2b3ef0ca63db196e70c44fd072a7\",\"license\":\"MIT\"},\"contracts/utils/libraries/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nlibrary EnumerableSet {\\n  struct Set {\\n    bytes32[] _values;\\n    mapping (bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n    * @dev Add a value to a set. O(1).\\n    *\\n    * Returns true if the value was added to the set, that is if it was not\\n    * already present.\\n    */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n    * @dev Removes a value from a set. O(1).\\n    *\\n    * Returns true if the value was removed from the set, that is if it was\\n    * present.\\n    */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) { // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n      // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n      bytes32 lastvalue = set._values[lastIndex];\\n\\n      // Move the last value to the index where the value to delete is\\n      set._values[toDeleteIndex] = lastvalue;\\n      // Update the index for the moved value\\n      set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n    * @dev Returns true if the value is in the set. O(1).\\n    */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n    * @dev Returns the number of values on the set. O(1).\\n    */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n  * @dev Returns the value stored at position `index` in the set. O(1).\\n  *\\n  * Note that there are no guarantees on the ordering of values inside the\\n  * array, and it may change when more values are added or removed.\\n  *\\n  * Requirements:\\n  *\\n  * - `index` must be strictly less than {length}.\\n  */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n    return set._values[index];\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n    * @dev Add a value to a set. O(1).\\n    *\\n    * Returns true if the value was added to the set, that is if it was not\\n    * already present.\\n    */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n    * @dev Removes a value from a set. O(1).\\n    *\\n    * Returns true if the value was removed from the set, that is if it was\\n    * present.\\n    */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n    * @dev Returns true if the value is in the set. O(1).\\n    */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n    * @dev Returns the number of values in the set. O(1).\\n    */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n  * @dev Returns the value stored at position `index` in the set. O(1).\\n  *\\n  * Note that there are no guarantees on the ordering of values inside the\\n  * array, and it may change when more values are added or removed.\\n  *\\n  * Requirements:\\n  *\\n  * - `index` must be strictly less than {length}.\\n  */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n    * @dev Add a value to a set. O(1).\\n    *\\n    * Returns true if the value was added to the set, that is if it was not\\n    * already present.\\n    */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n    * @dev Removes a value from a set. O(1).\\n    *\\n    * Returns true if the value was removed from the set, that is if it was\\n    * present.\\n    */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n    * @dev Returns true if the value is in the set. O(1).\\n    */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n    * @dev Returns the number of values in the set. O(1).\\n    */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n  * @dev Returns the value stored at position `index` in the set. O(1).\\n  *\\n  * Note that there are no guarantees on the ordering of values inside the\\n  * array, and it may change when more values are added or removed.\\n  *\\n  * Requirements:\\n  *\\n  * - `index` must be strictly less than {length}.\\n  */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n      return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n    * @dev Add a value to a set. O(1).\\n    *\\n    * Returns true if the value was added to the set, that is if it was not\\n    * already present.\\n    */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n    * @dev Removes a value from a set. O(1).\\n    *\\n    * Returns true if the value was removed from the set, that is if it was\\n    * present.\\n    */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n    * @dev Returns true if the value is in the set. O(1).\\n    */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n    * @dev Returns the number of values on the set. O(1).\\n    */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n  * @dev Returns the value stored at position `index` in the set. O(1).\\n  *\\n  * Note that there are no guarantees on the ordering of values inside the\\n  * array, and it may change when more values are added or removed.\\n  *\\n  * Requirements:\\n  *\\n  * - `index` must be strictly less than {length}.\\n  */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n}\",\"keccak256\":\"0x24c4e4354a1195a74af4cf25791af0dbe0308b25414aa15e7f1c5b574aae6280\",\"license\":\"MIT\"},\"contracts/utils/libraries/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c,\\n        string memory _d,\\n        string memory _e\\n    ) internal pure returns (string memory) {\\n        bytes memory _ba = bytes(_a);\\n        bytes memory _bb = bytes(_b);\\n        bytes memory _bc = bytes(_c);\\n        bytes memory _bd = bytes(_d);\\n        bytes memory _be = bytes(_e);\\n        string memory abcde = new string(\\n            _ba.length + _bb.length + _bc.length + _bd.length + _be.length\\n        );\\n        bytes memory babcde = bytes(abcde);\\n        uint256 k = 0;\\n        for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\\n        for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\\n        for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\\n        for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\\n        for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\\n        return string(babcde);\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c,\\n        string memory _d\\n    ) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, _d, \\\"\\\");\\n    }\\n\\n    function strConcat(\\n        string memory _a,\\n        string memory _b,\\n        string memory _c\\n    ) internal pure returns (string memory) {\\n        return strConcat(_a, _b, _c, \\\"\\\", \\\"\\\");\\n    }\\n\\n    function strConcat(string memory _a, string memory _b)\\n        internal\\n        pure\\n        returns (string memory)\\n    {\\n        return strConcat(_a, _b, \\\"\\\", \\\"\\\", \\\"\\\");\\n    }\\n\\n    function uint2str(uint256 _i)\\n        internal\\n        pure\\n        returns (string memory _uintAsString)\\n    {\\n        if (_i == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 j = _i;\\n        uint256 len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint256 k = len - 1;\\n        while (_i != 0) {\\n            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0xb5125219a0b6640bfd7c22463d63b97d1525e7830eea1bfe6312b6f08437762c\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60806040526103e8600a553480156200001757600080fd5b5060405162002aaa38038062002aaa8339810160408190526200003a9162000258565b604080518082018252600d81526c417274204f662042616d626f6f60981b602080830191825283518085019094526005845264424f41524360d81b9084015281519192916200008c9160009162000195565b508051620000a290600190602084019062000195565b50506006805460ff1916905550620000c3620000bd62000137565b6200013b565b6001600160a01b038116620000f55760405162461bcd60e51b8152600401620000ec9062000344565b60405180910390fd5b82516200010a90600d90602086019062000195565b50600b91909155600c80546001600160a01b0319166001600160a01b0390921691909117905550620003c1565b3390565b600680546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620001a3906200036e565b90600052602060002090601f016020900481019282620001c7576000855562000212565b82601f10620001e257805160ff191683800117855562000212565b8280016001018555821562000212579182015b8281111562000212578251825591602001919060010190620001f5565b506200022092915062000224565b5090565b5b8082111562000220576000815560010162000225565b80516001600160a01b03811681146200025357600080fd5b919050565b6000806000606084860312156200026d578283fd5b83516001600160401b038082111562000284578485fd5b818601915086601f83011262000298578485fd5b815181811115620002ad57620002ad620003ab565b6040516020601f8301601f1916820181018481118382101715620002d557620002d5620003ab565b60405282825284830181018a1015620002ec578788fd5b8793505b828410156200030f5784840181015182850182015292830192620002f0565b828411156200032057878184840101525b88015190965094506200033b9250506040860190506200023b565b90509250925092565b60208082526010908201526f42443a207a65726f206164647265737360801b604082015260600190565b6002810460018216806200038357607f821691505b60208210811415620003a557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b6126d980620003d16000396000f3fe6080604052600436106101d85760003560e01c80636871ee40116101025780639e281a9811610095578063c87b56dd11610064578063c87b56dd146104e2578063d5abeb0114610502578063e985e9c514610517578063f2fde38b14610537576101d8565b80639e281a981461046d5780639e91c7021461048d578063a22cb465146104a2578063b88d4fde146104c2576101d8565b80638456cb59116100d15780638456cb591461040e57806387837f3f146104235780638da5cb5b1461044357806395d89b4114610458576101d8565b80636871ee40146103bc5780636c0360eb146103c457806370a08231146103d9578063715018a6146103f9576101d8565b80633f4ba83a1161017a57806355f804b31161014957806355f804b314610352578063586ba782146103725780635c975abb146103875780636352211e1461039c576101d8565b80633f4ba83a146102e857806342842e0e146102fd578063469048401461031d578063510b515814610332576101d8565b8063095ea7b3116101b6578063095ea7b31461026257806318160ddd1461028457806323b872dd146102a65780633544a864146102c6576101d8565b806301ffc9a7146101dd57806306fdde0314610213578063081812fc14610235575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611d18565b610557565b60405161020a9190611f29565b60405180910390f35b34801561021f57600080fd5b5061022861059f565b60405161020a9190611f34565b34801561024157600080fd5b50610255610250366004611d96565b610631565b60405161020a9190611e51565b34801561026e57600080fd5b5061028261027d366004611cd3565b61067d565b005b34801561029057600080fd5b50610299610715565b60405161020a919061255b565b3480156102b257600080fd5b506102826102c1366004611be9565b610726565b3480156102d257600080fd5b506102db61075e565b60405161020a9190611edc565b3480156102f457600080fd5b50610282610826565b34801561030957600080fd5b50610282610318366004611be9565b6108a6565b34801561032957600080fd5b506102556108c1565b34801561033e57600080fd5b5061025561034d366004611d96565b6108d0565b34801561035e57600080fd5b5061028261036d366004611d50565b6108eb565b34801561037e57600080fd5b50610299610999565b34801561039357600080fd5b506101fd61099f565b3480156103a857600080fd5b506102556103b7366004611d96565b6109a8565b6102826109dd565b3480156103d057600080fd5b50610228610bb3565b3480156103e557600080fd5b506102996103f4366004611b9d565b610c41565b34801561040557600080fd5b50610282610c85565b34801561041a57600080fd5b50610282610cd0565b34801561042f57600080fd5b5061028261043e366004611d96565b610d46565b34801561044f57600080fd5b50610255610d8a565b34801561046457600080fd5b50610228610d9e565b34801561047957600080fd5b50610282610488366004611cd3565b610dad565b34801561049957600080fd5b50610299610e2f565b3480156104ae57600080fd5b506102826104bd366004611c9d565b610e35565b3480156104ce57600080fd5b506102826104dd366004611c24565b610e4b565b3480156104ee57600080fd5b506102286104fd366004611d96565b610e8a565b34801561050e57600080fd5b50610299610ebb565b34801561052357600080fd5b506101fd610532366004611bb7565b610ec0565b34801561054357600080fd5b50610282610552366004611b9d565b610ef0565b60006001600160e01b031982166380ac58cd60e01b148061058857506001600160e01b03198216635b5e139f60e01b145b80610597575061059782610f61565b90505b919050565b6060600080546105ae906125d3565b80601f01602080910402602001604051908101604052809291908181526020018280546105da906125d3565b80156106275780601f106105fc57610100808354040283529160200191610627565b820191906000526020600020905b81548152906001019060200180831161060a57829003601f168201915b5050505050905090565b600061063c82610f7a565b6106615760405162461bcd60e51b815260040161065890612307565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610688826109a8565b9050806001600160a01b0316836001600160a01b031614156106bc5760405162461bcd60e51b815260040161065890612404565b806001600160a01b03166106ce610f97565b6001600160a01b031614806106ea57506106ea81610532610f97565b6107065760405162461bcd60e51b8152600401610658906121e2565b6107108383610f9b565b505050565b60006107216009611009565b905090565b610737610731610f97565b8261100d565b6107535760405162461bcd60e51b8152600401610658906124aa565b610710838383611092565b6060600061076c60076111c5565b90508067ffffffffffffffff81111561079557634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156107be578160200160208202803683370190505b50915060005b81811015610821576107d76007826111d0565b8382815181106107f757634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152806108198161260e565b9150506107c4565b505090565b61082e610f97565b6001600160a01b031661083f610d8a565b6001600160a01b0316146108655760405162461bcd60e51b815260040161065890612353565b61086d6111e3565b7fe96f4ad59feed79352592d14dd41d083595392c2b47f2128bd455e2fb3b2cf0b4260405161089c919061255b565b60405180910390a1565b61071083838360405180602001604052806000815250610e4b565b600c546001600160a01b031681565b600e602052600090815260409020546001600160a01b031681565b6108f3610f97565b6001600160a01b0316610904610d8a565b6001600160a01b03161461092a5760405162461bcd60e51b815260040161065890612353565b600081511161094b5760405162461bcd60e51b8152600401610658906124fb565b805161095e90600d906020840190611a7d565b507f5411e8ebf1636d9e83d5fc4900bf80cbac82e8790da2a4c94db4895e889eedf68160405161098e9190611f34565b60405180910390a150565b600b5481565b60065460ff1690565b6000818152600260205260408120546001600160a01b0316806105975760405162461bcd60e51b815260040161065890612289565b6109e561099f565b15610a025760405162461bcd60e51b8152600401610658906121b8565b600b54341015610a245760405162461bcd60e51b81526004016106589061247c565b6063610a306009611009565b10610a4d5760405162461bcd60e51b8152600401610658906120cb565b600c54600b546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610a89573d6000803e3d6000fd5b506000600b5434610a9a9190612590565b90508015610ae457610aaa610f97565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015610ae2573d6000803e3d6000fd5b505b610aee6009611247565b6000610afa6009611009565b9050610b0d610b07610f97565b8261127b565b610b20610b18610f97565b600790611295565b610b3957610b37610b2f610f97565b6007906112aa565b505b610b41610f97565b6000828152600e6020526040902080546001600160a01b0319166001600160a01b03929092169190911790557f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff610b96610f97565b8242604051610ba793929190611ebb565b60405180910390a15050565b600d8054610bc0906125d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610bec906125d3565b8015610c395780601f10610c0e57610100808354040283529160200191610c39565b820191906000526020600020905b815481529060010190602001808311610c1c57829003601f168201915b505050505081565b60006001600160a01b038216610c695760405162461bcd60e51b81526004016106589061223f565b506001600160a01b031660009081526003602052604090205490565b610c8d610f97565b6001600160a01b0316610c9e610d8a565b6001600160a01b031614610cc45760405162461bcd60e51b815260040161065890612353565b610cce60006112bf565b565b610cd8610f97565b6001600160a01b0316610ce9610d8a565b6001600160a01b031614610d0f5760405162461bcd60e51b815260040161065890612353565b610d17611319565b7f82f0ceae7ce8182c5574cc191acb8068a19f1eb9e6988841b336aa54078bb52c4260405161089c919061255b565b610d4e610f97565b6001600160a01b0316610d5f610d8a565b6001600160a01b031614610d855760405162461bcd60e51b815260040161065890612353565b600b55565b60065461010090046001600160a01b031690565b6060600180546105ae906125d3565b610db5610f97565b6001600160a01b0316610dc6610d8a565b6001600160a01b031614610dec5760405162461bcd60e51b815260040161065890612353565b610dfe82610df8610f97565b83611374565b7f992ee874049a42cae0757a765cd7f641b6028cc35c3478bde8330bf417c3a7a98282604051610ba7929190611ea2565b600a5481565b610e47610e40610f97565b838361139c565b5050565b610e5c610e56610f97565b8361100d565b610e785760405162461bcd60e51b8152600401610658906124aa565b610e848484848461143f565b50505050565b6060610e9582611472565b604051602001610ea59190611e25565b6040516020818303038152906040529050919050565b606381565b6001600160a01b0380831660009081526005602090815260408083209385168352929052205460ff165b92915050565b610ef8610f97565b6001600160a01b0316610f09610d8a565b6001600160a01b031614610f2f5760405162461bcd60e51b815260040161065890612353565b6001600160a01b038116610f555760405162461bcd60e51b815260040161065890612009565b610f5e816112bf565b50565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610fd0826109a8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b5490565b600061101882610f7a565b6110345760405162461bcd60e51b81526004016106589061216c565b600061103f836109a8565b9050806001600160a01b0316846001600160a01b0316148061106657506110668185610ec0565b8061108a5750836001600160a01b031661107f84610631565b6001600160a01b0316145b949350505050565b826001600160a01b03166110a5826109a8565b6001600160a01b0316146110cb5760405162461bcd60e51b81526004016106589061204f565b6001600160a01b0382166110f15760405162461bcd60e51b8152600401610658906120f1565b6110fc838383610710565b611107600082610f9b565b6001600160a01b0383166000908152600360205260408120805460019290611130908490612590565b90915550506001600160a01b038216600090815260036020526040812080546001929061115e908490612564565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4610710838383610710565b600061059782611009565b60006111dc83836114f4565b9392505050565b6111eb61099f565b6112075760405162461bcd60e51b815260040161065890611f89565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61123a610f97565b60405161089c9190611e51565b600061125282611009565b82546001018084559091508110610e475760405162461bcd60e51b815260040161065890612524565b610e4782826040518060200160405280600081525061154d565b60006111dc836001600160a01b038416611580565b60006111dc836001600160a01b038416611598565b600680546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61132161099f565b1561133e5760405162461bcd60e51b8152600401610658906121b8565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861123a610f97565b6001600160a01b0383166113915761138c82826115e2565b610710565b61071083838361165e565b816001600160a01b0316836001600160a01b031614156113ce5760405162461bcd60e51b815260040161065890612135565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611432908590611f29565b60405180910390a3505050565b61144a848484611092565b6114568484848461174b565b610e845760405162461bcd60e51b815260040161065890611fb7565b606061147d82610f7a565b6114995760405162461bcd60e51b815260040161065890612388565b60006114a3611866565b905060008151116114c357604051806020016040528060008152506111dc565b806114cd84611875565b6040516020016114de929190611df6565b6040516020818303038152906040529392505050565b815460009082106115175760405162461bcd60e51b815260040161065890611f47565b82600001828154811061153a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6115578383611990565b611564600084848461174b565b6107105760405162461bcd60e51b815260040161065890611fb7565b60009081526001919091016020526040902054151590565b60006115a48383611580565b6115da57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610eea565b506000610eea565b6000826001600160a01b0316826040516115fb90611e4e565b60006040518083038185875af1925050503d8060008114611638576040519150601f19603f3d011682016040523d82523d6000602084013e61163d565b606091505b50509050806107105760405162461bcd60e51b815260040161065890612445565b600080846001600160a01b031663a9059cbb8585604051602401611683929190611ea2565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516116bc9190611dda565b6000604051808303816000865af19150503d80600081146116f9576040519150601f19603f3d011682016040523d82523d6000602084013e6116fe565b606091505b50915091508180156117285750805115806117285750808060200190518101906117289190611cfc565b6117445760405162461bcd60e51b8152600401610658906123d7565b5050505050565b600061175f846001600160a01b0316611a77565b1561185b57836001600160a01b031663150b7a0261177b610f97565b8786866040518563ffffffff1660e01b815260040161179d9493929190611e65565b602060405180830381600087803b1580156117b757600080fd5b505af19250505080156117e7575060408051601f3d908101601f191682019092526117e491810190611d34565b60015b611841573d808015611815576040519150601f19603f3d011682016040523d82523d6000602084013e61181a565b606091505b5080516118395760405162461bcd60e51b815260040161065890611fb7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061108a565b506001949350505050565b6060600d80546105ae906125d3565b60608161189a57506040805180820190915260018152600360fc1b602082015261059a565b8160005b81156118c457806118ae8161260e565b91506118bd9050600a8361257c565b915061189e565b60008167ffffffffffffffff8111156118ed57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611917576020820181803683370190505b5090505b841561108a5761192c600183612590565b9150611939600a86612629565b611944906030612564565b60f81b81838151811061196757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611989600a8661257c565b945061191b565b6001600160a01b0382166119b65760405162461bcd60e51b8152600401610658906122d2565b6119bf81610f7a565b156119dc5760405162461bcd60e51b815260040161065890612094565b6119e860008383610710565b6001600160a01b0382166000908152600360205260408120805460019290611a11908490612564565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4610e4760008383610710565b3b151590565b828054611a89906125d3565b90600052602060002090601f016020900481019282611aab5760008555611af1565b82601f10611ac457805160ff1916838001178555611af1565b82800160010185558215611af1579182015b82811115611af1578251825591602001919060010190611ad6565b50611afd929150611b01565b5090565b5b80821115611afd5760008155600101611b02565b600067ffffffffffffffff80841115611b3157611b31612669565b604051601f8501601f191681016020018281118282101715611b5557611b55612669565b604052848152915081838501861015611b6d57600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b038116811461059a57600080fd5b600060208284031215611bae578081fd5b6111dc82611b86565b60008060408385031215611bc9578081fd5b611bd283611b86565b9150611be060208401611b86565b90509250929050565b600080600060608486031215611bfd578081fd5b611c0684611b86565b9250611c1460208501611b86565b9150604084013590509250925092565b60008060008060808587031215611c39578081fd5b611c4285611b86565b9350611c5060208601611b86565b925060408501359150606085013567ffffffffffffffff811115611c72578182fd5b8501601f81018713611c82578182fd5b611c9187823560208401611b16565b91505092959194509250565b60008060408385031215611caf578182fd5b611cb883611b86565b91506020830135611cc88161267f565b809150509250929050565b60008060408385031215611ce5578182fd5b611cee83611b86565b946020939093013593505050565b600060208284031215611d0d578081fd5b81516111dc8161267f565b600060208284031215611d29578081fd5b81356111dc8161268d565b600060208284031215611d45578081fd5b81516111dc8161268d565b600060208284031215611d61578081fd5b813567ffffffffffffffff811115611d77578182fd5b8201601f81018413611d87578182fd5b61108a84823560208401611b16565b600060208284031215611da7578081fd5b5035919050565b60008151808452611dc68160208601602086016125a7565b601f01601f19169290920160200192915050565b60008251611dec8184602087016125a7565b9190910192915050565b60008351611e088184602088016125a7565b835190830190611e1c8183602088016125a7565b01949350505050565b60008251611e378184602087016125a7565b64173539b7b760d91b920191825250600501919050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e9890830184611dae565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252825182820181905260009190848201906040850190845b81811015611f1d5783516001600160a01b031683529284019291840191600101611ef8565b50909695505050505050565b901515815260200190565b6000602082526111dc6020830184611dae565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252600c908201526b10910e8814dbdb19081bdd5d60a21b604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526013908201527214d50e881d1c985b9cd9995c8819985a5b1959606a1b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526017908201527f53543a20657468207472616e73666572206661696c6564000000000000000000604082015260600190565b60208082526014908201527342443a20496e73756666696369656e742066656560601b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252600f908201526e42443a20696e76616c69642075726960881b604082015260600190565b6020808252601b908201527f436f756e7465723a20696e6372656d656e74206f766572666c6f770000000000604082015260600190565b90815260200190565b600082198211156125775761257761263d565b500190565b60008261258b5761258b612653565b500490565b6000828210156125a2576125a261263d565b500390565b60005b838110156125c25781810151838201526020016125aa565b83811115610e845750506000910152565b6002810460018216806125e757607f821691505b6020821081141561260857634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156126225761262261263d565b5060010190565b60008261263857612638612653565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610f5e57600080fd5b6001600160e01b031981168114610f5e57600080fdfea264697066735822122052efad9632501b1f9846289dbab48a11d95cc60e62443a43e588286bdc5e0e7764736f6c63430008000033",
    "deployedBytecode": "0x6080604052600436106101d85760003560e01c80636871ee40116101025780639e281a9811610095578063c87b56dd11610064578063c87b56dd146104e2578063d5abeb0114610502578063e985e9c514610517578063f2fde38b14610537576101d8565b80639e281a981461046d5780639e91c7021461048d578063a22cb465146104a2578063b88d4fde146104c2576101d8565b80638456cb59116100d15780638456cb591461040e57806387837f3f146104235780638da5cb5b1461044357806395d89b4114610458576101d8565b80636871ee40146103bc5780636c0360eb146103c457806370a08231146103d9578063715018a6146103f9576101d8565b80633f4ba83a1161017a57806355f804b31161014957806355f804b314610352578063586ba782146103725780635c975abb146103875780636352211e1461039c576101d8565b80633f4ba83a146102e857806342842e0e146102fd578063469048401461031d578063510b515814610332576101d8565b8063095ea7b3116101b6578063095ea7b31461026257806318160ddd1461028457806323b872dd146102a65780633544a864146102c6576101d8565b806301ffc9a7146101dd57806306fdde0314610213578063081812fc14610235575b600080fd5b3480156101e957600080fd5b506101fd6101f8366004611d18565b610557565b60405161020a9190611f29565b60405180910390f35b34801561021f57600080fd5b5061022861059f565b60405161020a9190611f34565b34801561024157600080fd5b50610255610250366004611d96565b610631565b60405161020a9190611e51565b34801561026e57600080fd5b5061028261027d366004611cd3565b61067d565b005b34801561029057600080fd5b50610299610715565b60405161020a919061255b565b3480156102b257600080fd5b506102826102c1366004611be9565b610726565b3480156102d257600080fd5b506102db61075e565b60405161020a9190611edc565b3480156102f457600080fd5b50610282610826565b34801561030957600080fd5b50610282610318366004611be9565b6108a6565b34801561032957600080fd5b506102556108c1565b34801561033e57600080fd5b5061025561034d366004611d96565b6108d0565b34801561035e57600080fd5b5061028261036d366004611d50565b6108eb565b34801561037e57600080fd5b50610299610999565b34801561039357600080fd5b506101fd61099f565b3480156103a857600080fd5b506102556103b7366004611d96565b6109a8565b6102826109dd565b3480156103d057600080fd5b50610228610bb3565b3480156103e557600080fd5b506102996103f4366004611b9d565b610c41565b34801561040557600080fd5b50610282610c85565b34801561041a57600080fd5b50610282610cd0565b34801561042f57600080fd5b5061028261043e366004611d96565b610d46565b34801561044f57600080fd5b50610255610d8a565b34801561046457600080fd5b50610228610d9e565b34801561047957600080fd5b50610282610488366004611cd3565b610dad565b34801561049957600080fd5b50610299610e2f565b3480156104ae57600080fd5b506102826104bd366004611c9d565b610e35565b3480156104ce57600080fd5b506102826104dd366004611c24565b610e4b565b3480156104ee57600080fd5b506102286104fd366004611d96565b610e8a565b34801561050e57600080fd5b50610299610ebb565b34801561052357600080fd5b506101fd610532366004611bb7565b610ec0565b34801561054357600080fd5b50610282610552366004611b9d565b610ef0565b60006001600160e01b031982166380ac58cd60e01b148061058857506001600160e01b03198216635b5e139f60e01b145b80610597575061059782610f61565b90505b919050565b6060600080546105ae906125d3565b80601f01602080910402602001604051908101604052809291908181526020018280546105da906125d3565b80156106275780601f106105fc57610100808354040283529160200191610627565b820191906000526020600020905b81548152906001019060200180831161060a57829003601f168201915b5050505050905090565b600061063c82610f7a565b6106615760405162461bcd60e51b815260040161065890612307565b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610688826109a8565b9050806001600160a01b0316836001600160a01b031614156106bc5760405162461bcd60e51b815260040161065890612404565b806001600160a01b03166106ce610f97565b6001600160a01b031614806106ea57506106ea81610532610f97565b6107065760405162461bcd60e51b8152600401610658906121e2565b6107108383610f9b565b505050565b60006107216009611009565b905090565b610737610731610f97565b8261100d565b6107535760405162461bcd60e51b8152600401610658906124aa565b610710838383611092565b6060600061076c60076111c5565b90508067ffffffffffffffff81111561079557634e487b7160e01b600052604160045260246000fd5b6040519080825280602002602001820160405280156107be578160200160208202803683370190505b50915060005b81811015610821576107d76007826111d0565b8382815181106107f757634e487b7160e01b600052603260045260246000fd5b6001600160a01b0390921660209283029190910190910152806108198161260e565b9150506107c4565b505090565b61082e610f97565b6001600160a01b031661083f610d8a565b6001600160a01b0316146108655760405162461bcd60e51b815260040161065890612353565b61086d6111e3565b7fe96f4ad59feed79352592d14dd41d083595392c2b47f2128bd455e2fb3b2cf0b4260405161089c919061255b565b60405180910390a1565b61071083838360405180602001604052806000815250610e4b565b600c546001600160a01b031681565b600e602052600090815260409020546001600160a01b031681565b6108f3610f97565b6001600160a01b0316610904610d8a565b6001600160a01b03161461092a5760405162461bcd60e51b815260040161065890612353565b600081511161094b5760405162461bcd60e51b8152600401610658906124fb565b805161095e90600d906020840190611a7d565b507f5411e8ebf1636d9e83d5fc4900bf80cbac82e8790da2a4c94db4895e889eedf68160405161098e9190611f34565b60405180910390a150565b600b5481565b60065460ff1690565b6000818152600260205260408120546001600160a01b0316806105975760405162461bcd60e51b815260040161065890612289565b6109e561099f565b15610a025760405162461bcd60e51b8152600401610658906121b8565b600b54341015610a245760405162461bcd60e51b81526004016106589061247c565b6063610a306009611009565b10610a4d5760405162461bcd60e51b8152600401610658906120cb565b600c54600b546040516001600160a01b039092169181156108fc0291906000818181858888f19350505050158015610a89573d6000803e3d6000fd5b506000600b5434610a9a9190612590565b90508015610ae457610aaa610f97565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015610ae2573d6000803e3d6000fd5b505b610aee6009611247565b6000610afa6009611009565b9050610b0d610b07610f97565b8261127b565b610b20610b18610f97565b600790611295565b610b3957610b37610b2f610f97565b6007906112aa565b505b610b41610f97565b6000828152600e6020526040902080546001600160a01b0319166001600160a01b03929092169190911790557f25b428dfde728ccfaddad7e29e4ac23c24ed7fd1a6e3e3f91894a9a073f5dfff610b96610f97565b8242604051610ba793929190611ebb565b60405180910390a15050565b600d8054610bc0906125d3565b80601f0160208091040260200160405190810160405280929190818152602001828054610bec906125d3565b8015610c395780601f10610c0e57610100808354040283529160200191610c39565b820191906000526020600020905b815481529060010190602001808311610c1c57829003601f168201915b505050505081565b60006001600160a01b038216610c695760405162461bcd60e51b81526004016106589061223f565b506001600160a01b031660009081526003602052604090205490565b610c8d610f97565b6001600160a01b0316610c9e610d8a565b6001600160a01b031614610cc45760405162461bcd60e51b815260040161065890612353565b610cce60006112bf565b565b610cd8610f97565b6001600160a01b0316610ce9610d8a565b6001600160a01b031614610d0f5760405162461bcd60e51b815260040161065890612353565b610d17611319565b7f82f0ceae7ce8182c5574cc191acb8068a19f1eb9e6988841b336aa54078bb52c4260405161089c919061255b565b610d4e610f97565b6001600160a01b0316610d5f610d8a565b6001600160a01b031614610d855760405162461bcd60e51b815260040161065890612353565b600b55565b60065461010090046001600160a01b031690565b6060600180546105ae906125d3565b610db5610f97565b6001600160a01b0316610dc6610d8a565b6001600160a01b031614610dec5760405162461bcd60e51b815260040161065890612353565b610dfe82610df8610f97565b83611374565b7f992ee874049a42cae0757a765cd7f641b6028cc35c3478bde8330bf417c3a7a98282604051610ba7929190611ea2565b600a5481565b610e47610e40610f97565b838361139c565b5050565b610e5c610e56610f97565b8361100d565b610e785760405162461bcd60e51b8152600401610658906124aa565b610e848484848461143f565b50505050565b6060610e9582611472565b604051602001610ea59190611e25565b6040516020818303038152906040529050919050565b606381565b6001600160a01b0380831660009081526005602090815260408083209385168352929052205460ff165b92915050565b610ef8610f97565b6001600160a01b0316610f09610d8a565b6001600160a01b031614610f2f5760405162461bcd60e51b815260040161065890612353565b6001600160a01b038116610f555760405162461bcd60e51b815260040161065890612009565b610f5e816112bf565b50565b6001600160e01b031981166301ffc9a760e01b14919050565b6000908152600260205260409020546001600160a01b0316151590565b3390565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610fd0826109a8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b5490565b600061101882610f7a565b6110345760405162461bcd60e51b81526004016106589061216c565b600061103f836109a8565b9050806001600160a01b0316846001600160a01b0316148061106657506110668185610ec0565b8061108a5750836001600160a01b031661107f84610631565b6001600160a01b0316145b949350505050565b826001600160a01b03166110a5826109a8565b6001600160a01b0316146110cb5760405162461bcd60e51b81526004016106589061204f565b6001600160a01b0382166110f15760405162461bcd60e51b8152600401610658906120f1565b6110fc838383610710565b611107600082610f9b565b6001600160a01b0383166000908152600360205260408120805460019290611130908490612590565b90915550506001600160a01b038216600090815260036020526040812080546001929061115e908490612564565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4610710838383610710565b600061059782611009565b60006111dc83836114f4565b9392505050565b6111eb61099f565b6112075760405162461bcd60e51b815260040161065890611f89565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa61123a610f97565b60405161089c9190611e51565b600061125282611009565b82546001018084559091508110610e475760405162461bcd60e51b815260040161065890612524565b610e4782826040518060200160405280600081525061154d565b60006111dc836001600160a01b038416611580565b60006111dc836001600160a01b038416611598565b600680546001600160a01b03838116610100818102610100600160a81b031985161790945560405193909204169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61132161099f565b1561133e5760405162461bcd60e51b8152600401610658906121b8565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861123a610f97565b6001600160a01b0383166113915761138c82826115e2565b610710565b61071083838361165e565b816001600160a01b0316836001600160a01b031614156113ce5760405162461bcd60e51b815260040161065890612135565b6001600160a01b0383811660008181526005602090815260408083209487168084529490915290819020805460ff1916851515179055517f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190611432908590611f29565b60405180910390a3505050565b61144a848484611092565b6114568484848461174b565b610e845760405162461bcd60e51b815260040161065890611fb7565b606061147d82610f7a565b6114995760405162461bcd60e51b815260040161065890612388565b60006114a3611866565b905060008151116114c357604051806020016040528060008152506111dc565b806114cd84611875565b6040516020016114de929190611df6565b6040516020818303038152906040529392505050565b815460009082106115175760405162461bcd60e51b815260040161065890611f47565b82600001828154811061153a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6115578383611990565b611564600084848461174b565b6107105760405162461bcd60e51b815260040161065890611fb7565b60009081526001919091016020526040902054151590565b60006115a48383611580565b6115da57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610eea565b506000610eea565b6000826001600160a01b0316826040516115fb90611e4e565b60006040518083038185875af1925050503d8060008114611638576040519150601f19603f3d011682016040523d82523d6000602084013e61163d565b606091505b50509050806107105760405162461bcd60e51b815260040161065890612445565b600080846001600160a01b031663a9059cbb8585604051602401611683929190611ea2565b6040516020818303038152906040529060e01b6020820180516001600160e01b0383818316178352505050506040516116bc9190611dda565b6000604051808303816000865af19150503d80600081146116f9576040519150601f19603f3d011682016040523d82523d6000602084013e6116fe565b606091505b50915091508180156117285750805115806117285750808060200190518101906117289190611cfc565b6117445760405162461bcd60e51b8152600401610658906123d7565b5050505050565b600061175f846001600160a01b0316611a77565b1561185b57836001600160a01b031663150b7a0261177b610f97565b8786866040518563ffffffff1660e01b815260040161179d9493929190611e65565b602060405180830381600087803b1580156117b757600080fd5b505af19250505080156117e7575060408051601f3d908101601f191682019092526117e491810190611d34565b60015b611841573d808015611815576040519150601f19603f3d011682016040523d82523d6000602084013e61181a565b606091505b5080516118395760405162461bcd60e51b815260040161065890611fb7565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061108a565b506001949350505050565b6060600d80546105ae906125d3565b60608161189a57506040805180820190915260018152600360fc1b602082015261059a565b8160005b81156118c457806118ae8161260e565b91506118bd9050600a8361257c565b915061189e565b60008167ffffffffffffffff8111156118ed57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611917576020820181803683370190505b5090505b841561108a5761192c600183612590565b9150611939600a86612629565b611944906030612564565b60f81b81838151811061196757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611989600a8661257c565b945061191b565b6001600160a01b0382166119b65760405162461bcd60e51b8152600401610658906122d2565b6119bf81610f7a565b156119dc5760405162461bcd60e51b815260040161065890612094565b6119e860008383610710565b6001600160a01b0382166000908152600360205260408120805460019290611a11908490612564565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4610e4760008383610710565b3b151590565b828054611a89906125d3565b90600052602060002090601f016020900481019282611aab5760008555611af1565b82601f10611ac457805160ff1916838001178555611af1565b82800160010185558215611af1579182015b82811115611af1578251825591602001919060010190611ad6565b50611afd929150611b01565b5090565b5b80821115611afd5760008155600101611b02565b600067ffffffffffffffff80841115611b3157611b31612669565b604051601f8501601f191681016020018281118282101715611b5557611b55612669565b604052848152915081838501861015611b6d57600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b038116811461059a57600080fd5b600060208284031215611bae578081fd5b6111dc82611b86565b60008060408385031215611bc9578081fd5b611bd283611b86565b9150611be060208401611b86565b90509250929050565b600080600060608486031215611bfd578081fd5b611c0684611b86565b9250611c1460208501611b86565b9150604084013590509250925092565b60008060008060808587031215611c39578081fd5b611c4285611b86565b9350611c5060208601611b86565b925060408501359150606085013567ffffffffffffffff811115611c72578182fd5b8501601f81018713611c82578182fd5b611c9187823560208401611b16565b91505092959194509250565b60008060408385031215611caf578182fd5b611cb883611b86565b91506020830135611cc88161267f565b809150509250929050565b60008060408385031215611ce5578182fd5b611cee83611b86565b946020939093013593505050565b600060208284031215611d0d578081fd5b81516111dc8161267f565b600060208284031215611d29578081fd5b81356111dc8161268d565b600060208284031215611d45578081fd5b81516111dc8161268d565b600060208284031215611d61578081fd5b813567ffffffffffffffff811115611d77578182fd5b8201601f81018413611d87578182fd5b61108a84823560208401611b16565b600060208284031215611da7578081fd5b5035919050565b60008151808452611dc68160208601602086016125a7565b601f01601f19169290920160200192915050565b60008251611dec8184602087016125a7565b9190910192915050565b60008351611e088184602088016125a7565b835190830190611e1c8183602088016125a7565b01949350505050565b60008251611e378184602087016125a7565b64173539b7b760d91b920191825250600501919050565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611e9890830184611dae565b9695505050505050565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b6020808252825182820181905260009190848201906040850190845b81811015611f1d5783516001600160a01b031683529284019291840191600101611ef8565b50909695505050505050565b901515815260200190565b6000602082526111dc6020830184611dae565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b6020808252600c908201526b10910e8814dbdb19081bdd5d60a21b604082015260600190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526013908201527214d50e881d1c985b9cd9995c8819985a5b1959606a1b604082015260600190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526017908201527f53543a20657468207472616e73666572206661696c6564000000000000000000604082015260600190565b60208082526014908201527342443a20496e73756666696369656e742066656560601b604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252600f908201526e42443a20696e76616c69642075726960881b604082015260600190565b6020808252601b908201527f436f756e7465723a20696e6372656d656e74206f766572666c6f770000000000604082015260600190565b90815260200190565b600082198211156125775761257761263d565b500190565b60008261258b5761258b612653565b500490565b6000828210156125a2576125a261263d565b500390565b60005b838110156125c25781810151838201526020016125aa565b83811115610e845750506000910152565b6002810460018216806125e757607f821691505b6020821081141561260857634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156126225761262261263d565b5060010190565b60008261263857612638612653565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114610f5e57600080fd5b6001600160e01b031981168114610f5e57600080fdfea264697066735822122052efad9632501b1f9846289dbab48a11d95cc60e62443a43e588286bdc5e0e7764736f6c63430008000033",
    "libraries": {},
    "devdoc": {
        "kind": "dev",
        "methods": {
            "approve(address,uint256)": {
                "details": "See {IERC721-approve}."
            },
            "balanceOf(address)": {
                "details": "See {IERC721-balanceOf}."
            },
            "getApproved(uint256)": {
                "details": "See {IERC721-getApproved}."
            },
            "isApprovedForAll(address,address)": {
                "details": "See {IERC721-isApprovedForAll}."
            },
            "name()": {
                "details": "See {IERC721Metadata-name}."
            },
            "owner()": {
                "details": "Returns the address of the current owner."
            },
            "ownerOf(uint256)": {
                "details": "See {IERC721-ownerOf}."
            },
            "paused()": {
                "details": "Return true if the contract is paused, and false otherwise"
            },
            "renounceOwnership()": {
                "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
            },
            "safeTransferFrom(address,address,uint256)": {
                "details": "See {IERC721-safeTransferFrom}."
            },
            "safeTransferFrom(address,address,uint256,bytes)": {
                "details": "See {IERC721-safeTransferFrom}."
            },
            "setApprovalForAll(address,bool)": {
                "details": "See {IERC721-setApprovalForAll}."
            },
            "supportsInterface(bytes4)": {
                "details": "See {IERC165-supportsInterface}."
            },
            "symbol()": {
                "details": "See {IERC721Metadata-symbol}."
            },
            "tokenURI(uint256)": {
                "details": "See {IERC721Metadata-tokenURI}."
            },
            "transferFrom(address,address,uint256)": {
                "details": "See {IERC721-transferFrom}."
            },
            "transferOwnership(address)": {
                "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
            }
        },
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 32228,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "_name",
                "offset": 0,
                "slot": "0",
                "type": "t_string_storage"
            },
            {
                "astId": 32230,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "_symbol",
                "offset": 0,
                "slot": "1",
                "type": "t_string_storage"
            },
            {
                "astId": 32234,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "_owners",
                "offset": 0,
                "slot": "2",
                "type": "t_mapping(t_uint256,t_address)"
            },
            {
                "astId": 32238,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "_balances",
                "offset": 0,
                "slot": "3",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 32242,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "_tokenApprovals",
                "offset": 0,
                "slot": "4",
                "type": "t_mapping(t_uint256,t_address)"
            },
            {
                "astId": 32248,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "_operatorApprovals",
                "offset": 0,
                "slot": "5",
                "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
            },
            {
                "astId": 34841,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "_paused",
                "offset": 0,
                "slot": "6",
                "type": "t_bool"
            },
            {
                "astId": 580,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "_owner",
                "offset": 1,
                "slot": "6",
                "type": "t_address"
            },
            {
                "astId": 9751,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "whitelist",
                "offset": 0,
                "slot": "7",
                "type": "t_struct(AddressSet)36795_storage"
            },
            {
                "astId": 9754,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "tokenIdCounter",
                "offset": 0,
                "slot": "9",
                "type": "t_struct(Counter)34699_storage"
            },
            {
                "astId": 9760,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "royaltiesPercent",
                "offset": 0,
                "slot": "10",
                "type": "t_uint256"
            },
            {
                "astId": 9762,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "feeMint",
                "offset": 0,
                "slot": "11",
                "type": "t_uint256"
            },
            {
                "astId": 9764,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "feeRecipient",
                "offset": 0,
                "slot": "12",
                "type": "t_address"
            },
            {
                "astId": 9766,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "baseURI",
                "offset": 0,
                "slot": "13",
                "type": "t_string_storage"
            },
            {
                "astId": 9770,
                "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                "label": "creator",
                "offset": 0,
                "slot": "14",
                "type": "t_mapping(t_uint256,t_address)"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
                "base": "t_bytes32",
                "encoding": "dynamic_array",
                "label": "bytes32[]",
                "numberOfBytes": "32"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_bytes32,t_uint256)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_uint256,t_address)": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => address)",
                "numberOfBytes": "32",
                "value": "t_address"
            },
            "t_string_storage": {
                "encoding": "bytes",
                "label": "string",
                "numberOfBytes": "32"
            },
            "t_struct(AddressSet)36795_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableSet.AddressSet",
                "members": [
                    {
                        "astId": 36794,
                        "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                        "label": "_inner",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(Set)36518_storage"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(Counter)34699_storage": {
                "encoding": "inplace",
                "label": "struct Counters.Counter",
                "members": [
                    {
                        "astId": 34698,
                        "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                        "label": "_value",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_uint256"
                    }
                ],
                "numberOfBytes": "32"
            },
            "t_struct(Set)36518_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableSet.Set",
                "members": [
                    {
                        "astId": 36513,
                        "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                        "label": "_values",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_array(t_bytes32)dyn_storage"
                    },
                    {
                        "astId": 36517,
                        "contract": "contracts/drops/Boarc.sol:BoarcDrop",
                        "label": "_indexes",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_mapping(t_bytes32,t_uint256)"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
